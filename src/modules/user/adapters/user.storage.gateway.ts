import { TUser } from "../entities/user";
import { IUserRepository } from "../use-cases/ports/user.repository";
import { pool } from '../../../config/postgress'
import { TPerson } from "../entities/person";

//Como un DAO.
export class UserStorageGateway implements IUserRepository{

    async findAll(): Promise<TUser[]> {
           const query = `SELECT id,username,created_at as "createdAt",
           last_signin as "lastSignin",s. id AS "statusId",s.description,
           r.id as "roleId",r.description as "role",p.name,p.surname,
           p.lastname FROM users ORDER BY id DESC;` ;
           const {rows: userRows} = await pool.query(query); //crated_at
           return userRows.map((user)=><TUser>user)
    }

    findById(id: number): Promise<TUser> {
        throw new Error("Method not implemented.");
    }

    async save(user: TPerson): Promise<TPerson> {
        
        const query = `INSERT INTO people(name,surname,lastname,birthday, curp,rfc) 
            values($1,$2,$3,$4,$5,$6) RETURNING id;`;

            const values = [
                user.name,
                user.surname,
                user.lastname,
                user.birthday,
                user.curp,
                user.rfc
            ];

            try{
                const result = await pool.query(query, values);
                // Assuming that the "id" is generated by the database upon insertion
                const insertedId = result.rows[0].id;
                user.id = insertedId; // Assign the generated ID to the user object
                return user;
            }catch(err){
                throw new Error(`Failed to save user:`);
            }
        
    }

    update(user: TUser): Promise<TUser> {
        throw new Error("Method not implemented.");
    }
    delete(id: number): Promise<boolean> {
        throw new Error("Method not implemented.");
    }

}